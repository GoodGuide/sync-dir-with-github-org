#!/usr/bin/env ruby

require 'pathname'
require 'optparse'

file = File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__
ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../Gemfile', file)
require 'bundler/setup'
require 'octokit'
require 'pry'

def system(command)
  STDERR.puts "  > #{command}"
  Kernel.system command
end

def prompt(ask)
  STDERR.print(ask << ' ')
  STDIN.gets.chomp.downcase[0] == 'y'
end

def fixit(desc, expected, actual, should_correct=nil, &correction)
  return if expected == actual

  warn "#{desc} is incorrect:"
  warn "  expected: #{expected}"
  warn "  got:      #{actual}"

  should_correct = prompt('Fix it?') if should_correct.nil?
  correction.call if should_correct
end

ROOT_PATH = Pathname.new(File.dirname(__FILE__))

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options]"

  opts.on("-f", "--[no-]fix-remotes", "Always fix git remotes URLs; default is to prompt.") do |v|
    options[:always_fix_remotes] = v
  end

  opts.on("-C", "--[no-]clone-missing", "Always clone missing repos including forks; default is to prompt") do |v|
    options[:always_clone_missing] = v
  end

  opts.on("--ignore-legacy-repos", "Ignore repos with a name starting with 'legacy-'") do |v|
    options[:ignore_legacy] = v
  end
end.parse!

client = Octokit::Client.new(access_token: ENV.fetch('GITHUB_TOKEN'))
client.auto_paginate = true

STDERR.print 'Fetching all GoodGuide repos... '
goodguide_repos = client.org_repos('GoodGuide')
warn "Got #{goodguide_repos.count} repos"

repo_directories = []

goodguide_repos.each do |repo|
  warn "\n#{repo.full_name} ".ljust(80, '_')

  just_cloned = false

  directory = ROOT_PATH.join(repo.name)

  # track for later
  repo_directories << directory

  if repo.name.start_with?('legacy-') and options[:ignore_legacy]
    warn "Skipping legacy repo"
    next
  end

  if directory.directory?
    Dir.chdir(directory.to_s) do
      current_url = `git config remote.origin.url`.chomp
      fixit('Current remote URL', repo.ssh_url, current_url, options[:always_fix_remotes]) do
        system "git config remote.origin.url #{repo.ssh_url}"
      end

      system "git fetch origin --prune --tags --recurse-submodules=yes"
      system "git submodule init"
    end

  else
    if repo.fork
      should_clone = options.fetch(:always_clone_missing) {
        prompt("Repo is a fork and isn't yet cloned at ./#{directory}; clone anyway?")
      }
      next unless should_clone
    end

    system "git clone --recursive #{repo.ssh_url} ./#{repo.name}"
    just_cloned = true
  end

  if repo.fork
    warn "fetching more detail..."
    # replace with full object via /repos/:name
    repo = client.repo(repo.full_name)

    Dir.chdir(directory.to_s) do
      current_upstream_url = `git config remote.upstream.url`.chomp
      current_upstream_url = nil unless $?.success?
      fixit('Upstream remote URL', repo.parent.ssh_url, current_upstream_url, just_cloned || options[:always_fix_remotes]) do
        if current_upstream_url.nil?
          system "git remote add upstream #{repo.parent.ssh_url}"
        else
          system "git remote set-url upstream #{repo.parent.ssh_url}"
        end

        current_upstream_url = repo.parent.ssh_url
      end

      system "git fetch upstream --prune --tags --recurse-submodules=yes" unless current_upstream_url.nil?
    end
  end

  hooksdir = directory.join('.git', 'hooks')
  if hooksdir.symlink?
    hooksdir.delete
    Process.spawn('goodguide-git-hooks', 'install', chdir: directory.to_s)
    Process.wait
  end
end

dirs = []
ROOT_PATH.each_child do |e|
  next unless e.directory?
  dirs << e
end

untracked_dirs = dirs - repo_directories

if untracked_dirs.count > 0
  puts "There are %i untracked directories in the tree:" % untracked_dirs.count
  puts untracked_dirs
end
